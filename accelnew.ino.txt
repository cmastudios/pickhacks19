// This #include statement was automatically added by the Particle IDE.
#include <SparkFunMMA8452Q.h>

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// If using software SPI (the default case):
#define OLED_MOSI   A4
#define OLED_CLK   A5
#define OLED_DC    A3
#define OLED_CS    A2
#define OLED_RESET A1
Adafruit_SSD1306 display(OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);
#define NUMFLAKES 10
#define XPOS 0
#define YPOS 1
#define DELTAY 2
String dots = "";
bool measureOn = true;

// #define LOGO16_GLCD_HEIGHT 16 
// #define LOGO16_GLCD_WIDTH  16 

// 'flex logo oled', 128x64px
static const unsigned char PROGMEM logo16_glcd_bmp[] = {
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xe0, 0x00, 0x0f, 0xff, 0xf8, 0x7f, 0xe3, 0xff, 0xfc, 0x00, 0x03, 0xff, 0xfc, 0x3f, 0xff, 0x0f,
0xe0, 0x00, 0x0f, 0xff, 0xf8, 0x7f, 0x8f, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xfc, 0x0f, 0xfe, 0x0f,
0xe0, 0x00, 0x0f, 0xff, 0xf8, 0x7f, 0x1f, 0xfc, 0x78, 0x00, 0x03, 0xff, 0xfe, 0x07, 0xfc, 0x1f,
0xe0, 0xff, 0xff, 0xff, 0xf8, 0x7e, 0x3f, 0xc0, 0x38, 0x3f, 0xff, 0xff, 0xff, 0x03, 0xf8, 0x3f,
0xe0, 0xff, 0xff, 0xff, 0xf8, 0x7c, 0x7f, 0x00, 0x38, 0x3f, 0x7f, 0xff, 0xff, 0xc1, 0xe0, 0xff,
0xe0, 0xff, 0xff, 0xff, 0xf8, 0x7c, 0xfc, 0x00, 0x38, 0x3f, 0xff, 0xff, 0xff, 0xe0, 0xc1, 0xff,
0xe0, 0xff, 0xff, 0xff, 0xf8, 0x7c, 0xfc, 0x00, 0x38, 0x3f, 0xff, 0xff, 0xff, 0xf0, 0x03, 0xff,
0xe0, 0x00, 0x1f, 0xff, 0xf8, 0x79, 0xf8, 0x00, 0x38, 0x00, 0x07, 0xff, 0xff, 0xf8, 0x07, 0xff,
0xe0, 0x00, 0x1f, 0xff, 0xf8, 0x79, 0xf8, 0x00, 0x38, 0x00, 0x07, 0xff, 0xff, 0xfc, 0x0f, 0xff,
0xe0, 0x00, 0x1f, 0xff, 0xf8, 0x79, 0xf8, 0x00, 0x38, 0x00, 0x07, 0xff, 0xff, 0xf8, 0x07, 0xff,
0xe0, 0xff, 0xff, 0xff, 0xf8, 0x79, 0xf8, 0x00, 0x38, 0x3f, 0xff, 0xff, 0xff, 0xf0, 0x03, 0xff,
0xe0, 0xff, 0xff, 0xff, 0xf8, 0x7c, 0xfc, 0x00, 0x38, 0x3f, 0xff, 0xff, 0xff, 0xc0, 0xc0, 0xff,
0xe0, 0xff, 0xff, 0xff, 0xf8, 0x7e, 0xfe, 0x00, 0x38, 0x3e, 0x7f, 0xff, 0xff, 0x83, 0xe0, 0x7f,
0xe0, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0x80, 0x38, 0x3f, 0xff, 0xff, 0xff, 0x07, 0xf8, 0x3f,
0xe0, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xfd, 0xf0, 0x38, 0x3f, 0xff, 0xff, 0xfe, 0x0f, 0xfc, 0x1f,
0xe0, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xfc, 0x1f, 0xfe, 0x0f,
0xe1, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xf8, 0x3f, 0xff, 0x07,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff 
};

// Create an MMA8452Q object, used throughout the rest of the sketch.
MMA8452Q accel; // Default constructor, SA0 pin is HIGH
double x;
double y;
double z;
String data = "{";
int curdp = 0;

// The above works if the MMA8452Q's address select pin (SA0) is high.
// If SA0 is low (if the jumper on the back of the SparkFun MMA8452Q breakout
// board is closed), initialize it like this:
// MMA8452Q accel(MMA8452Q_ADD_SA0_); 

unsigned long now = 0;
const unsigned long PUBLISH_PERIOD_MS = 200; //12 Hz
unsigned long nextPublish = PUBLISH_PERIOD_MS;
const unsigned long REFRESH_PERIOD_MS = 500;
unsigned long nextRefresh = REFRESH_PERIOD_MS;
//const unsigned long FIRST_PUBLISH_MS = 5000;

//DATA DIRECTORY PATH: https://pickhacks19.firebaseio.com/devices/pickhacks19-2/measurements
//"Measurements" directory will collect data for time specified in app, then app will pull/interpret/store data in "users", then delete data in "measurements"
#define PUBLISH_EVENT_NAME "sendMeasurement" //TODO: CREATE NEW WEBHOOK WITH CORRECT DIRECTORY AND SAME NAME THAT WE CHANGE THIS TO
#define DEVICE_NAME "pickhacks19-1"

bool publishEnabled = false;
bool enabledNow = false;
bool enabledLast = false;


// Forward declarations
void publishData();
int startSendingData(String);
int stopSendingData(String);
void setHeader();
void setStandby();
void startDisplay();
void setMeasure();


void setup() {
	Serial.begin(9600);
	
	accel.begin(SCALE_2G, ODR_12); // Set up accel with +/-2g range, and slowest (1Hz) ODR
    Particle.variable("accelx", x);
    Particle.variable("accely", y);
    Particle.variable("accelz", z);
	
	Particle.function("send", startSendingData); // SYNTAX?
	Particle.function("stop", stopSendingData);
	
	
	startDisplay();
    
}

#define PRECISION 2
#define PSIZE 12

void loop() {
    now = millis();
    setDisplay();
    
    if (accel.available()) {
	    
        accel.read();
        x = accel.cx;
        y = accel.cy;
        z = accel.cz;
        
    }
    
    if (now > nextPublish) {

        if (publishEnabled) {
            data += "\\\"" + String(curdp) + "\\\":{\\\"x\\\":";
            data += String(x, PRECISION);
            data += ",\\\"y\\\":";
            data += String(y, PRECISION);
            data += ",\\\"z\\\":";
            data += String(z, PRECISION);
            data += "},";
            
            ++curdp;
            
            if (curdp % PSIZE == 0) {
                publishData();
            }
            //Serial.println(data);
        } 
        
        nextPublish = now + PUBLISH_PERIOD_MS;
    }
}



void publishData() { //TODO: FIGURE OUT HOW TO MAKE HEADER THE TIMESTAMP?
                    

    //TODO: This is just to check Particle console, can remove later
    //Particle.publish("X Acceleration in Gs", String(x), PUBLIC);
    //Particle.publish("Y Acceleration in Gs", String(y), PUBLIC);
    //Particle.publish("Z Acceleration in GS", String(z), PUBLIC);
    
    data.remove(data.length()-1);
    data += "}";
    
    String tx = String("{\"n\":\"" DEVICE_NAME "\",\"x\":\"") + data + String("\"}");

    // char buf[256];
    // snprintf(buf, sizeof(buf), "{\"data\":%s}", data);
    Particle.publish(PUBLISH_EVENT_NAME, tx, PRIVATE);
    
    data = "{";
// 	char buf[256];
// 	snprintf(buf, sizeof(buf), "{\"x\":%f,\"y\":%f,\"z\":%f}", x, y, z);
// 	Serial.printlnf("publishing %s", buf);
// 	Particle.publish(PUBLISH_EVENT_NAME, buf, PRIVATE);
}

int startSendingData(String str) {
    curdp = 0;
    data = "{";
    publishEnabled = true;
    return 0;
}

int stopSendingData(String str) {
    publishEnabled = false;
    // actually send the data here
    publishData();
    return 0;
}


void setDisplay() {
    if(now > nextRefresh && !publishEnabled) {
        display.clearDisplay();
        setDots();
        setHeader();
        setStandby();
        display.display();
        nextRefresh = now + REFRESH_PERIOD_MS;
    } else if (now > nextRefresh && publishEnabled) {
        dots = "";
        display.clearDisplay();
        setHeader();
        setMeasure();
        display.display();
        nextRefresh = now + REFRESH_PERIOD_MS;
    }
}


void startDisplay() {
    display.begin(SSD1306_SWITCHCAPVCC);
  // init done
  
    display.clearDisplay();
    display.drawBitmap(0, 0,  logo16_glcd_bmp, 128, 64, 1); //void drawBitmap(int16_t x, int16_t y, uint8_t *bitmap, int16_t w, int16_t h, uint16_t color);
    display.display();
    delay(2000);
    display.clearDisplay();
    for (int i = 0; i < 15; i++) {
        display.fillRect(i*8, i*4, 128-(2*(i*8)), 64-(2*(i*4)), 1); //void drawBitmap(int16_t x, int16_t y, uint8_t *bitmap, int16_t w, int16_t h, uint16_t color);
        display.display();
        display.clearDisplay();
    }

    
    display.setCursor(0, 10);
    display.setTextColor(1);
    display.setTextSize(1);
    display.setTextWrap(true);
    display.print("Choose the following device on your FLEX \napp: \n\n    " DEVICE_NAME);
    display.display();
    delay(4000);
    display.clearDisplay();
    setHeader();
    setStandby();
}

void setHeader() {
    display.setCursor(0,0);
    display.setTextSize(1);
    display.print("FLEX Device");
    
    display.setCursor(98, 0);
    display.print(Time.hour() - 6);
    display.print(":");
    if (Time.minute() - 10 < 0) {
        display.print("0");
        display.print(Time.minute());
    } else {
        display.print(Time.minute());
    }
    
    display.setCursor(0,10);
    display.print("---------------------");
}

void setDots() {
    
    dots += ".";
    if(dots.length() > 7) {
        dots = "";
    }
    display.setCursor(20, 15);
    display.setTextSize(2);
    display.print(dots);
}

void setStandby() {
    display.setCursor(3, 37);
    display.setTextSize(1);
    display.print("Select a measurement\n");
    display.setCursor(0, 44);
    display.print("or exercise from your      FLEX app!");
}

void setMeasure() {
    display.setCursor(9,21);
    display.setTextSize(2);
    if (!measureOn) {
        display.print("RECORDING");
        measureOn = true;
    } else {
        measureOn = false;
    }
    display.setCursor(5, 42);
    display.setTextSize(1);
    display.print("Follow instructions     on your phone!");

}